// app.js

const http = require('http');
const url = require('url');

// Import your local modules (Ensure these paths are correct - ./modules/moduleName)
const rootContentGenerator = require('./modules/rootModule'); // Make sure these are "rootModule", "aboutModule", etc. (camelCase)
const aboutContentGenerator = require('./modules/aboutModule');
const contactContentGenerator = require('./modules/contactModule');
const galleryContentGenerator = require('./modules/galleryModule');
const nonFoundContentGenerator = require('./modules/nonFoundModule');
const footerContentGenerator = require('./modules/footerModule');

const PORT = 5000; // Or 3000, if you decided to change it

const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const path = parsedUrl.pathname;

    // Initialize variables to hold the content, title, and status code
    let pageContent = '';
    let pageTitle = '';
    let statusCode = 200; // Default status code is 200 OK

    // Name to be passed to modules
    const userName = "John Smith";

    switch (path) {
        case '/':
            pageTitle = 'Welcome to my Node.js Application';
            pageContent = `<h1>${pageTitle}</h1><p>${rootContentGenerator.getRootContent(userName)}</p>`;
            break;
        case '/about':
            pageTitle = 'This is the About Page';
            pageContent = `<h1>${pageTitle}</h1><p>${aboutContentGenerator.getAboutContent(userName)}</p>`;
            break;
        case '/contact':
            pageTitle = 'This is the Contact Page';
            pageContent = `<h1>${pageTitle}</h1><p>${contactContentGenerator.getContactContent(userName)}</p>`;
            break;
        case '/gallery':
            pageTitle = 'This is the Gallery Page';
            // The content for gallery is just the heading, so we put it directly here
            pageContent = `<h1>${pageTitle}</h1><p>${galleryContentGenerator.getGalleryContent()}</p>`;
            break;
        default:
            statusCode = 400; // Set status to Bad Request for non-existing routes
            pageTitle = 'Invalid Request';
            pageContent = `<h1>${pageTitle}</h1><p>${nonFoundContentGenerator.getNonFoundContent()}</p>`;
            break;
    }

    // Now, send the headers ONCE based on the determined status code
    res.writeHead(statusCode, { 'Content-Type': 'text/html' });

    // Construct the full HTML response
    res.write(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${pageTitle}</title>
        </head>
        <body>
            ${pageContent}
            ${footerContentGenerator.getFooterContent()}
        </body>
        </html>
    `);

    res.end(); // End the response
});

server.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}/`);
});

/*
Your Name: [Your Full Name Here]
Date: July 18, 2025
Section: [Your Section Here]
*/
